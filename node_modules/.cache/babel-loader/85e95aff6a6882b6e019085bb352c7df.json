{"ast":null,"code":"export const BASE_URL = \"https://tweetbackend.azurewebsites.net/Tweets/\";\nconst CONTENT_TYPE = \"application/JSON\";\n\nconst register = async userData => {\n  let response = await fetch(BASE_URL + \"Register/\", {\n    method: \"POST\",\n    body: JSON.stringify(userData),\n    headers: {\n      \"Content-Type\": CONTENT_TYPE,\n      Accept: CONTENT_TYPE\n    }\n  });\n  if (response.ok) return true;\n  return false;\n};\n\nconst isEmailExist = async email => {\n  let response = await fetch(BASE_URL + \"search/\" + email);\n  let result = await response.json();\n  if (result.email === email) return true;\n  return false;\n};\n\nconst login = async userData => {\n  let response = await fetch(BASE_URL + \"Login\", {\n    method: \"POST\",\n    body: JSON.stringify(userData),\n    headers: {\n      \"Content-Type\": CONTENT_TYPE,\n      Accept: CONTENT_TYPE\n    }\n  });\n  let result = await response.json();\n\n  if (result.token == null) {\n    return false;\n  }\n\n  sessionStorage.setItem(\"email\", result.email);\n  sessionStorage.setItem(\"name\", result.loginId);\n  sessionStorage.setItem(\"token\", result.token);\n  sessionStorage.setItem(\"phone\", result.refreshToken);\n  return true;\n};\n\nconst resetPassword = async userData => {\n  let response = await fetch(BASE_URL + {\n    userData\n  } + \"/forget-Password\", {\n    method: \"POST\",\n    body: JSON.stringify(userData),\n    headers: {\n      \"Content-Type\": CONTENT_TYPE,\n      Accept: CONTENT_TYPE\n    }\n  });\n  let result = await response.json();\n\n  if (result === \"Password Successfully Changed\") {\n    sessionStorage.removeItem(\"name\");\n    sessionStorage.removeItem(\"token\");\n    sessionStorage.removeItem(\"email\");\n    sessionStorage.removeItem(\"phone\");\n    return true;\n  }\n\n  return false;\n};\n\nexport { register, isEmailExist, login, resetPassword };","map":{"version":3,"names":["BASE_URL","CONTENT_TYPE","register","userData","response","fetch","method","body","JSON","stringify","headers","Accept","ok","isEmailExist","email","result","json","login","token","sessionStorage","setItem","loginId","refreshToken","resetPassword","removeItem"],"sources":["C:/Users/vinvi/Desktop/CC/Cognizant Project/TweetApp_React/src/api/auth.js"],"sourcesContent":["export const BASE_URL = \"https://tweetbackend.azurewebsites.net/Tweets/\";\r\nconst CONTENT_TYPE = \"application/JSON\";\r\n\r\nconst register = async (userData) => {\r\n  let response = await fetch(BASE_URL + \"Register/\", {\r\n    method: \"POST\",\r\n    body: JSON.stringify(userData),\r\n    headers: {\r\n      \"Content-Type\": CONTENT_TYPE,\r\n      Accept: CONTENT_TYPE,\r\n    },\r\n  });\r\n  if (response.ok) return true;\r\n  return false;\r\n};\r\n\r\nconst isEmailExist = async (email) => {\r\n  let response = await fetch(BASE_URL + \"search/\" + email);\r\n  let result = await response.json();\r\n  if (result.email === email) return true;\r\n  return false;\r\n};\r\n\r\nconst login = async (userData) => {\r\n  let response = await fetch(BASE_URL + \"Login\", {\r\n    method: \"POST\",\r\n    body: JSON.stringify(userData),\r\n    headers: {\r\n      \"Content-Type\": CONTENT_TYPE,\r\n      Accept: CONTENT_TYPE,\r\n    },\r\n  });\r\n\r\n  let result = await response.json();\r\n\r\n  if (result.token == null) {\r\n    return false;\r\n  }\r\n\r\n  sessionStorage.setItem(\"email\", result.email);\r\n  sessionStorage.setItem(\"name\", result.loginId);\r\n  sessionStorage.setItem(\"token\", result.token);\r\n  sessionStorage.setItem(\"phone\", result.refreshToken);\r\n\r\n  return true;\r\n};\r\n\r\nconst resetPassword = async (userData) => {\r\n  let response = await fetch(BASE_URL + { userData } + \"/forget-Password\", {\r\n    method: \"POST\",\r\n    body: JSON.stringify(userData),\r\n    headers: {\r\n      \"Content-Type\": CONTENT_TYPE,\r\n      Accept: CONTENT_TYPE,\r\n    },\r\n  });\r\n  let result = await response.json();\r\n  if (result === \"Password Successfully Changed\") {\r\n    sessionStorage.removeItem(\"name\");\r\n    sessionStorage.removeItem(\"token\");\r\n    sessionStorage.removeItem(\"email\");\r\n    sessionStorage.removeItem(\"phone\");\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport { register, isEmailExist, login, resetPassword };\r\n"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,gDAAjB;AACP,MAAMC,YAAY,GAAG,kBAArB;;AAEA,MAAMC,QAAQ,GAAG,MAAOC,QAAP,IAAoB;EACnC,IAAIC,QAAQ,GAAG,MAAMC,KAAK,CAACL,QAAQ,GAAG,WAAZ,EAAyB;IACjDM,MAAM,EAAE,MADyC;IAEjDC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,QAAf,CAF2C;IAGjDO,OAAO,EAAE;MACP,gBAAgBT,YADT;MAEPU,MAAM,EAAEV;IAFD;EAHwC,CAAzB,CAA1B;EAQA,IAAIG,QAAQ,CAACQ,EAAb,EAAiB,OAAO,IAAP;EACjB,OAAO,KAAP;AACD,CAXD;;AAaA,MAAMC,YAAY,GAAG,MAAOC,KAAP,IAAiB;EACpC,IAAIV,QAAQ,GAAG,MAAMC,KAAK,CAACL,QAAQ,GAAG,SAAX,GAAuBc,KAAxB,CAA1B;EACA,IAAIC,MAAM,GAAG,MAAMX,QAAQ,CAACY,IAAT,EAAnB;EACA,IAAID,MAAM,CAACD,KAAP,KAAiBA,KAArB,EAA4B,OAAO,IAAP;EAC5B,OAAO,KAAP;AACD,CALD;;AAOA,MAAMG,KAAK,GAAG,MAAOd,QAAP,IAAoB;EAChC,IAAIC,QAAQ,GAAG,MAAMC,KAAK,CAACL,QAAQ,GAAG,OAAZ,EAAqB;IAC7CM,MAAM,EAAE,MADqC;IAE7CC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,QAAf,CAFuC;IAG7CO,OAAO,EAAE;MACP,gBAAgBT,YADT;MAEPU,MAAM,EAAEV;IAFD;EAHoC,CAArB,CAA1B;EASA,IAAIc,MAAM,GAAG,MAAMX,QAAQ,CAACY,IAAT,EAAnB;;EAEA,IAAID,MAAM,CAACG,KAAP,IAAgB,IAApB,EAA0B;IACxB,OAAO,KAAP;EACD;;EAEDC,cAAc,CAACC,OAAf,CAAuB,OAAvB,EAAgCL,MAAM,CAACD,KAAvC;EACAK,cAAc,CAACC,OAAf,CAAuB,MAAvB,EAA+BL,MAAM,CAACM,OAAtC;EACAF,cAAc,CAACC,OAAf,CAAuB,OAAvB,EAAgCL,MAAM,CAACG,KAAvC;EACAC,cAAc,CAACC,OAAf,CAAuB,OAAvB,EAAgCL,MAAM,CAACO,YAAvC;EAEA,OAAO,IAAP;AACD,CAtBD;;AAwBA,MAAMC,aAAa,GAAG,MAAOpB,QAAP,IAAoB;EACxC,IAAIC,QAAQ,GAAG,MAAMC,KAAK,CAACL,QAAQ,GAAG;IAAEG;EAAF,CAAX,GAA0B,kBAA3B,EAA+C;IACvEG,MAAM,EAAE,MAD+D;IAEvEC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,QAAf,CAFiE;IAGvEO,OAAO,EAAE;MACP,gBAAgBT,YADT;MAEPU,MAAM,EAAEV;IAFD;EAH8D,CAA/C,CAA1B;EAQA,IAAIc,MAAM,GAAG,MAAMX,QAAQ,CAACY,IAAT,EAAnB;;EACA,IAAID,MAAM,KAAK,+BAAf,EAAgD;IAC9CI,cAAc,CAACK,UAAf,CAA0B,MAA1B;IACAL,cAAc,CAACK,UAAf,CAA0B,OAA1B;IACAL,cAAc,CAACK,UAAf,CAA0B,OAA1B;IACAL,cAAc,CAACK,UAAf,CAA0B,OAA1B;IACA,OAAO,IAAP;EACD;;EACD,OAAO,KAAP;AACD,CAlBD;;AAoBA,SAAStB,QAAT,EAAmBW,YAAnB,EAAiCI,KAAjC,EAAwCM,aAAxC"},"metadata":{},"sourceType":"module"}