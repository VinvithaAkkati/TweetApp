{"ast":null,"code":"const BASE_URL = \"https://tweetbackend.azurewebsites.net/Tweets/\";\n\nconst viewAllTweet = async () => {\n  let response = await fetch(BASE_URL, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      Authorization: \"Bearer \" + sessionStorage.getItem(\"token\")\n    }\n  });\n  let tweets = await response.json();\n  return tweets;\n};\n\nconst submitTweet = async (content, tags) => {\n  let tweet = {\n    creatorId: sessionStorage.getItem(\"email\"),\n    token: sessionStorage.getItem(\"token\"),\n    content: content,\n    tags: tags\n  };\n  let response = await fetch(BASE_URL + tweet.creatorId + \"/Add\", {\n    method: \"POST\",\n    body: JSON.stringify(tweet),\n    headers: {\n      \"Content-Type\": \"application/JSON\",\n      Accept: \"application/JSON\",\n      Authorization: \"Bearer \" + tweet.token\n    }\n  });\n  if (response.ok) return true;\n  return false;\n};\n\nconst getTweet = async tweetId => {\n  let response = await fetch(BASE_URL + sessionStorage.getItem(\"email\") + \"/get/\" + tweetId, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/JSON\",\n      Accept: \"application/JSON\",\n      Authorization: \"Bearer \" + sessionStorage.getItem(\"token\")\n    }\n  });\n  let result = await response.json();\n  return result;\n};\n\nconst postComment = async (tweetJson, reply) => {\n  let tweet = await getTweet(tweetJson.tweetId);\n  let comment = {\n    Replied_userId: sessionStorage.getItem(\"email\"),\n    ReplyMessage: reply\n  };\n  let response = await fetch(BASE_URL + comment.Replied_userId + \"/reply/\" + tweet.tweetId, {\n    method: \"POST\",\n    body: JSON.stringify(comment),\n    headers: {\n      \"Content-Type\": \"application/JSON\",\n      Accept: \"application/JSON\",\n      Authorization: \"Bearer \" + sessionStorage.getItem(\"token\")\n    }\n  });\n\n  if (response.status === 200) {\n    return true;\n  }\n\n  return false;\n};\n\nexport { viewAllTweet, submitTweet, postComment, getTweet };","map":{"version":3,"names":["BASE_URL","viewAllTweet","response","fetch","method","headers","Accept","Authorization","sessionStorage","getItem","tweets","json","submitTweet","content","tags","tweet","creatorId","token","body","JSON","stringify","ok","getTweet","tweetId","result","postComment","tweetJson","reply","comment","Replied_userId","ReplyMessage","status"],"sources":["C:/Users/vinvi/Desktop/CC/Cognizant Project/TweetApp_React/src/api/tweet.js"],"sourcesContent":["const BASE_URL = \"https://tweetbackend.azurewebsites.net/Tweets/\";\r\n\r\nconst viewAllTweet = async () => {\r\n  let response = await fetch(BASE_URL, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Accept: \"application/json, text/plain, */*\",\r\n      Authorization: \"Bearer \" + sessionStorage.getItem(\"token\"),\r\n    },\r\n  });\r\n  let tweets = await response.json();\r\n  return tweets;\r\n};\r\n\r\nconst submitTweet = async (content,tags) => {\r\n  let tweet = {\r\n    creatorId: sessionStorage.getItem(\"email\"),\r\n    token: sessionStorage.getItem(\"token\"),\r\n    content: content,\r\n    tags: tags,\r\n  };\r\n  let response = await fetch(\r\n    BASE_URL + tweet.creatorId + \"/Add\",\r\n    {\r\n      method: \"POST\",\r\n      body: JSON.stringify(tweet),\r\n      headers: {\r\n        \"Content-Type\": \"application/JSON\",\r\n        Accept: \"application/JSON\",\r\n        Authorization: \"Bearer \" + tweet.token,\r\n      },\r\n    }\r\n  );\r\n  if (response.ok) return true;\r\n  return false;\r\n};\r\n\r\nconst getTweet = async (tweetId) => {\r\n  let response = await fetch(\r\n    BASE_URL + sessionStorage.getItem(\"email\") + \"/get/\" + tweetId,\r\n    {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/JSON\",\r\n        Accept: \"application/JSON\",\r\n        Authorization: \"Bearer \" + sessionStorage.getItem(\"token\"),\r\n      },\r\n    }\r\n  );\r\n  let result = await response.json();\r\n  return result;\r\n};\r\n\r\nconst postComment = async (tweetJson, reply) => {\r\n  let tweet = await getTweet(tweetJson.tweetId);\r\n  let comment = {\r\n    Replied_userId: sessionStorage.getItem(\"email\"),\r\n    ReplyMessage: reply,\r\n  };\r\n  let response = await fetch(\r\n    BASE_URL + comment.Replied_userId + \"/reply/\" + tweet.tweetId,\r\n    {\r\n      method: \"POST\",\r\n      body: JSON.stringify(comment),\r\n      headers: {\r\n        \"Content-Type\": \"application/JSON\",\r\n        Accept: \"application/JSON\",\r\n        Authorization: \"Bearer \" + sessionStorage.getItem(\"token\"),\r\n      },\r\n    }\r\n  );\r\n  if (response.status === 200) {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport { viewAllTweet, submitTweet, postComment, getTweet };\r\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,gDAAjB;;AAEA,MAAMC,YAAY,GAAG,YAAY;EAC/B,IAAIC,QAAQ,GAAG,MAAMC,KAAK,CAACH,QAAD,EAAW;IACnCI,MAAM,EAAE,KAD2B;IAEnCC,OAAO,EAAE;MACPC,MAAM,EAAE,mCADD;MAEPC,aAAa,EAAE,YAAYC,cAAc,CAACC,OAAf,CAAuB,OAAvB;IAFpB;EAF0B,CAAX,CAA1B;EAOA,IAAIC,MAAM,GAAG,MAAMR,QAAQ,CAACS,IAAT,EAAnB;EACA,OAAOD,MAAP;AACD,CAVD;;AAYA,MAAME,WAAW,GAAG,OAAOC,OAAP,EAAeC,IAAf,KAAwB;EAC1C,IAAIC,KAAK,GAAG;IACVC,SAAS,EAAER,cAAc,CAACC,OAAf,CAAuB,OAAvB,CADD;IAEVQ,KAAK,EAAET,cAAc,CAACC,OAAf,CAAuB,OAAvB,CAFG;IAGVI,OAAO,EAAEA,OAHC;IAIVC,IAAI,EAAEA;EAJI,CAAZ;EAMA,IAAIZ,QAAQ,GAAG,MAAMC,KAAK,CACxBH,QAAQ,GAAGe,KAAK,CAACC,SAAjB,GAA6B,MADL,EAExB;IACEZ,MAAM,EAAE,MADV;IAEEc,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,KAAf,CAFR;IAGEV,OAAO,EAAE;MACP,gBAAgB,kBADT;MAEPC,MAAM,EAAE,kBAFD;MAGPC,aAAa,EAAE,YAAYQ,KAAK,CAACE;IAH1B;EAHX,CAFwB,CAA1B;EAYA,IAAIf,QAAQ,CAACmB,EAAb,EAAiB,OAAO,IAAP;EACjB,OAAO,KAAP;AACD,CArBD;;AAuBA,MAAMC,QAAQ,GAAG,MAAOC,OAAP,IAAmB;EAClC,IAAIrB,QAAQ,GAAG,MAAMC,KAAK,CACxBH,QAAQ,GAAGQ,cAAc,CAACC,OAAf,CAAuB,OAAvB,CAAX,GAA6C,OAA7C,GAAuDc,OAD/B,EAExB;IACEnB,MAAM,EAAE,KADV;IAEEC,OAAO,EAAE;MACP,gBAAgB,kBADT;MAEPC,MAAM,EAAE,kBAFD;MAGPC,aAAa,EAAE,YAAYC,cAAc,CAACC,OAAf,CAAuB,OAAvB;IAHpB;EAFX,CAFwB,CAA1B;EAWA,IAAIe,MAAM,GAAG,MAAMtB,QAAQ,CAACS,IAAT,EAAnB;EACA,OAAOa,MAAP;AACD,CAdD;;AAgBA,MAAMC,WAAW,GAAG,OAAOC,SAAP,EAAkBC,KAAlB,KAA4B;EAC9C,IAAIZ,KAAK,GAAG,MAAMO,QAAQ,CAACI,SAAS,CAACH,OAAX,CAA1B;EACA,IAAIK,OAAO,GAAG;IACZC,cAAc,EAAErB,cAAc,CAACC,OAAf,CAAuB,OAAvB,CADJ;IAEZqB,YAAY,EAAEH;EAFF,CAAd;EAIA,IAAIzB,QAAQ,GAAG,MAAMC,KAAK,CACxBH,QAAQ,GAAG4B,OAAO,CAACC,cAAnB,GAAoC,SAApC,GAAgDd,KAAK,CAACQ,OAD9B,EAExB;IACEnB,MAAM,EAAE,MADV;IAEEc,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeQ,OAAf,CAFR;IAGEvB,OAAO,EAAE;MACP,gBAAgB,kBADT;MAEPC,MAAM,EAAE,kBAFD;MAGPC,aAAa,EAAE,YAAYC,cAAc,CAACC,OAAf,CAAuB,OAAvB;IAHpB;EAHX,CAFwB,CAA1B;;EAYA,IAAIP,QAAQ,CAAC6B,MAAT,KAAoB,GAAxB,EAA6B;IAC3B,OAAO,IAAP;EACD;;EACD,OAAO,KAAP;AACD,CAtBD;;AAwBA,SAAS9B,YAAT,EAAuBW,WAAvB,EAAoCa,WAApC,EAAiDH,QAAjD"},"metadata":{},"sourceType":"module"}